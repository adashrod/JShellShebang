#!/bin/bash

# this script can be used in a shebang to execute shell scripts using JDK 9's jshell
# it has three main differences from directly invoking the jshell executable with a shell script
# 1: this filters out lines starting with the "#" character, which prevents the shebang line from throwing an error in
#    jshell
# 2: this passes arguments into the jshell environment by prepending a variable definition statement to the script
#    being executed by jshell. Arguments are available to the script as the variable "args", whose type is String[]
# 3: jshell will exit after running the script rather than staying open

jshellExec=/usr/lib/jvm/java-9-oracle/bin/jshell

optionPattern="-.*"
# note: per `jshell --help` "execution" and "add-exports" might be changed in a future release
argsWithOperandPattern="--(class-path|module-path|add-modules|startup|feedback|execution|add-exports|J|R|C)"
index=0
jshellArgsStr=""
# iterate over all args (jshell options, script name, script args) and find where the script name is
for arg in "${@:1}"; do
    index=$((index+1))
    if [[ -n "${expectArgNext}" ]]; then
        unset expectArgNext
        jshellArgsStr="${jshellArgsStr} ${arg}"
    elif [[ "${arg}" =~ ${optionPattern} ]]; then
        if [[ "${arg}" =~ ${argsWithOperandPattern} ]]; then
            expectArgNext=1
        fi
        jshellArgsStr="${jshellArgsStr} ${arg}"
    else
        scriptNameIndex=${index}
        break
    fi
done

if [[ -n "${scriptNameIndex}" ]]; then
    tempScript=$(mktemp)
    argsStmt="String[] args = {"
    for i in $(seq $((scriptNameIndex+1)) $#); do
        arg="${!i}"
        escapedArg=$(echo ${arg//\\/\\\\}) # replace a literal backslash with 2 literal backslashes, which will be an
                                           # escaped backslash in the generated source
        escapedArg=$(echo ${escapedArg//\"/\\\"}) # replace a literal quote with 2 chars: a backslash and a quote, which
                                                  # form an escaped quote in the generated source
        argsStmt="${argsStmt}\"${escapedArg}\", "
    done
    argsStmt="${argsStmt}};"
    echo "${argsStmt}" >> "${tempScript}"

    scriptLineComment="^\s*#"
    while IFS= read -r line || [[ -n "$line" ]]; do
        if ! [[ "${line}" =~ ${scriptLineComment} ]]; then
            echo "${line}" >> "${tempScript}"
        fi
    done < "${!scriptNameIndex}"
    # jshell stays open when given a script file to execute
    echo "/exit" >> "${tempScript}"

    ${jshellExec} ${jshellArgsStr} "${tempScript}"
else
    ${jshellExec} ${jshellArgsStr}
fi
